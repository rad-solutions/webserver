# .github/workflows/release.yml
name: Release and Publish

on:
  workflow_run:
    workflows:
      - "Django CI and Release"
    types:
      - completed

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write # Permiso necesario para la autenticación OIDC con AWS

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: Create GitHub App installation token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.CI_APP_PRIVATE_KEY }}
          permission-issues: write
          permission-pull-requests: write

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{ steps.app-token.outputs.token }}

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install semantic-release and plugins
        run: |
          npm install -g semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          # Ejecuta semantic-release y captura el resultado en una variable
          # El resultado es un JSON si hay release, o la palabra "false" si no lo hay.
          RESULT=$(npx semantic-release || true)

          # Verifica si se publicó un release
          # El JSON de resultado contiene la propiedad "version"
          if [[ $RESULT == *"version"* ]]; then
            # Extrae la versión del JSON usando una herramienta simple
            VERSION=$(echo $RESULT | grep -o '"version":"[^"]*' | grep -o '[^"]*$')
            echo "New release version found: $VERSION"
            # Declara los outputs para los siguientes jobs
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "No new release published."
            echo "new_release_published=false" >> $GITHUB_OUTPUT
          fi

  build-and-push-ecr:
    name: Build and Push to ECR
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: 978368259161
      ECR_REPOSITORY: webserver

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS creds via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::978368259161:role/GitHubActions-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ env.AWS_ACCOUNT_ID }}

      - name: Build, tag & push to ECR
        run: |
          ECR_REGISTRY=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE_NAME=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}
          IMAGE_TAG=${{ needs.release.outputs.new_release_version }}

          echo "Building and pushing image with tag: $IMAGE_TAG"

          docker build \
            -t $IMAGE_NAME:$IMAGE_TAG \
            -t $IMAGE_NAME:latest .

          docker push $IMAGE_NAME --all-tags
