# Generated by Django 5.2 on 2025-07-22 15:35

from django.db import migrations

EQUIPMENT_TYPES = [
    "RX CONVENCIONAL",
    "RX CONVENCIONAL PORTATIL",
    "RX PERIAPICAL",
    "RX PERIAPICAL PORTATIL",
    "RX VETERINARIO",
    "RX INDUSTRIAL",
    "TOMOGRAFÍA COMPUTARIZADA",
    "TOMOGRAFÍA DENTAL",
    "PANORÁMICO CEFÁLICO",
    "ANGIÓGRAFO",
    "MAMÓGRAFO",
    "DENSITOMETRO",
    "ARCO EN C",
    "FLUOROSCOPIO",
]


def populate_equipment_types(apps, schema_editor):
    EquipmentType = apps.get_model("app", "EquipmentType")
    Equipment = apps.get_model("app", "Equipment")

    # Create EquipmentType instances
    for name in EQUIPMENT_TYPES:
        EquipmentType.objects.get_or_create(name=name)

    # Update existing Equipment instances by mapping the old 'nombre' to the new 'equipment_type'
    for equipment in Equipment.objects.all():
        # This logic assumes the old 'nombre' field exactly matches one of the new EquipmentType names.
        # If the names might not match, you would need more complex logic here to handle the mapping.
        equipment_type, created = EquipmentType.objects.get_or_create(
            name=equipment.nombre
        )
        equipment.equipment_type = equipment_type

        # Since we added a new 'nombre' field for specific identifiers,
        # we can decide what to do with it. For now, we'll leave the specific name blank
        # if it was one of the standardized types.
        if equipment.nombre in EQUIPMENT_TYPES:
            equipment.nombre = ""  # Clear it if it's a standard name

        equipment.save()


def reverse_populate_equipment_types(apps, schema_editor):
    # This function is optional but good practice. It allows you to reverse the migration.
    EquipmentType = apps.get_model("app", "EquipmentType")
    Equipment = apps.get_model("app", "Equipment")

    # For each equipment, move the equipment_type name back to the 'nombre' field.
    for equipment in Equipment.objects.all():
        if equipment.equipment_type:
            equipment.nombre = equipment.equipment_type.name
            equipment.save()

    # Delete the created EquipmentType objects
    EquipmentType.objects.filter(name__in=EQUIPMENT_TYPES).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("app", "0028_equipmenttype_alter_equipment_nombre_and_more"),
    ]

    operations = [
        migrations.RunPython(
            populate_equipment_types, reverse_code=reverse_populate_equipment_types
        ),
    ]
