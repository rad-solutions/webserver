# Generated by Django 5.2 on 2025-06-05 22:47

from django.db import migrations, models


def create_asesoria_checklist_definitions(apps, schema_editor):
    ChecklistItemDefinition = apps.get_model("app", "ChecklistItemDefinition")
    # For ProcessTypeChoices
    ASESORIA = "asesoria"
    # For PracticeCategoryChoices
    VETERINARIA = "veterinaria"
    INDUSTRIAL = "industrial"
    MEDICA_CAT1 = "medica_cat1"
    MEDICA_CAT2 = "medica_cat2"

    # Remove any existing Asesoría definitions to avoid duplicates
    ChecklistItemDefinition.objects.filter(process_type=ASESORIA).delete()
    # Definitions for Asesoría - Veterinaria/Industrial
    items_vet_ind = [
        "CARTA SOLICITUD DE LICENCIA (Bogotá no)",
        "ANEXO 4",
        "RUT",
        "CÉDULA Y DIPLOMAS EPR",
        "PROGRAMA DE PROTECCIÓN RADIOLÓGICA",
        "ESTUDIO AMBIENTAL",
        "ESTUDIO MEDIO AMBIENTAL",
        "CÁLCULO DE BLINDAJES",
        "PROGRAMA DE VIGILANCIA POST MERCADO",
        "CERTIFICADO DE CURSO DE PROTECCIÓN RADIOLÓGICA TOES",
        "CONSTANCIA ASISTENCIA A CURSO SOBRE MANEJO DE EQUIPOS RX",
        "PROGRAMA DE CAPACITACIÓN EN PROTECCIÓN RADIOLÓGICA",
        "CERTIFICADO DE DOSIMETRÍA",
        "EVALUACIÓN DE EMERGENCIAS. (NO APLICA PARA INDUSTRIALES CAT I)",
        "HOJA DE VIDA DEL EQUIPO/MANTENIMIENTO/FICHA TECNICA/MANUAL DE USUARIO / REGISTRO DE IMPORTACIÓN",
        "LICENCIA ANTERIOR/PUESTA EN MARCHA O PRUEBAS INICIALES",
        "PLANO GENERAL",
    ]
    percentage_vet_ind = round(100 / len(items_vet_ind), 2)
    for idx, name in enumerate(items_vet_ind, 1):
        ChecklistItemDefinition.objects.get_or_create(
            process_type=ASESORIA,
            practice_category=VETERINARIA,
            name=name,
            defaults={"order": idx, "percentage": percentage_vet_ind},
        )
        ChecklistItemDefinition.objects.get_or_create(
            process_type=ASESORIA,
            practice_category=INDUSTRIAL,
            name=name,
            defaults={"order": idx, "percentage": percentage_vet_ind},
        )

    # Definitions for Asesoría - Médica Categoría 1
    items_med_cat1 = [
        "ANEXO 3 SOLICITUD DE REGISTRO.",
        "CEDULA SOLICITANTE Y RUT",
        "CERTIFICADO REPRESENTANTE LEGAL",
        "DOCUMENTOS OPR (acta de grado)",
        "CÁLCULO DE BLINDAJE",
        "CONTROL DE CALIDAD",
        "REPORTE DE DOSIMETRÍA.",
        "NIVELES DE REFERENCIA (anexo)",
        "PLANO DE LA INSTALACIÓN Revisa:1. Elementos consumibles en cada área 2. Aire o ventilación en cada área Y los demás requerimientos.",
        "CURSOS DE PROTECCIÓN RADIOLÓGICA DEL PERSONAL.(actas de grado)",
        "PROGRAMA DE CAPACITACIÓN (anexo asistencia)",
        "HOJA DE VIDA EQUIPOS - REGISTROS DE MANTENIMIENTO DEL EQUIPO - INVIMA – ",
        "FORMATO DE PUESTA EN MARCHA (SI EL EQUIPO ES NUEVO)",
        "MANUAL DE TECNOVIGILANCIA (anexo foreia)",
        "MANUAL DE PROTECCIÓN RADIOLÓGICA anexo(incidentes -accidentes)",
        "LICENCIA ANTERIOR DEL EQUIPO (no si el equipo es nuevo) "
        '("CUNDINAMARCA, si son equipos fabricados antes del 2005 factura o '
        "certificado de ingreso al inventario de la entidad). o para Cundinamarca – "
        "inclusión en el inventario.",
    ]
    percentage_med_cat1 = round(100 / len(items_med_cat1), 2)
    for idx, name in enumerate(items_med_cat1, 1):
        ChecklistItemDefinition.objects.get_or_create(
            process_type=ASESORIA,
            practice_category=MEDICA_CAT1,
            name=name,
            defaults={"order": idx, "percentage": percentage_med_cat1},
        )

    # Definitions for Asesoría - Médica Categoría 2
    items_med_cat2 = [
        "ANEXO 3 SOLICITUD DE REGISTRO.",
        "CÁMARA DE COMERCIO Y RUT",
        "CEDULA REPRESENTANTE LEGAL",
        "DOCUMENTOS OPR (actas de grado)",
        "CÁLCULO DE BLINDAJE.",
        "CONTROL DE CALIDAD.",
        "REPORTE DE DOSIMETRÍA",
        "PLANO DE LA INSTALACIÓN",
        "CURSOS DE PROTECCIÓN RADIOLÓGICA DEL PERSONAL.",
        "PROGRAMA DE CAPACITACIÓN",
        "NIVELES DE REFERENCIA",
        "DESCRIPCIÓN SISTEMAS DE SEGURIDAD",
        "HOJA DE VIDA EQUIPOS - REGISTROS DE MANTENIMIENTO DEL EQUIPO - INVIMA – PERMISO DE IMPORTACIÓN",
        "1 FORMATO DE PUESTA EN MARCHA (SI EL EQUIPO ES NUEVO).",
        "MANUAL DE PROTECCIÓN RADIOLÓGICA",
        "MANUAL DE TECNOVIGILANCIA",
        "LICENCIA ANTERIOR DEL EQUIPO (no si el equipo es nuevo) REGISTRO",
        "EVALUACIÓN DE PUESTO DE TRABAJO",
        "ACEPTACIÓN DE RESPONSABILIDADES OPR",
    ]
    percentage_med_cat2 = round(100 / len(items_med_cat2), 2)
    for idx, name in enumerate(items_med_cat2, 1):
        ChecklistItemDefinition.objects.get_or_create(
            process_type=ASESORIA,
            practice_category=MEDICA_CAT2,
            name=name,
            defaults={"order": idx, "percentage": percentage_med_cat2},
        )


def delete_asesoria_checklist_definitions(apps, schema_editor):
    ChecklistItemDefinition = apps.get_model("app", "ChecklistItemDefinition")
    ChecklistItemDefinition.objects.filter(process_type="asesoria").delete()


class Migration(migrations.Migration):

    dependencies = [
        ("app", "0012_populate_checklist_definitions"),
    ]

    operations = [
        # Add practice_category fields
        migrations.AddField(
            model_name="checklistitemdefinition",
            name="practice_category",
            field=models.CharField(
                blank=True,
                choices=[
                    ("veterinaria", "Veterinaria"),
                    ("industrial", "Industrial"),
                    ("medica_cat1", "Médica Categoría 1"),
                    ("medica_cat2", "Médica Categoría 2"),
                ],
                max_length=30,
                null=True,
                verbose_name="Categoría de Práctica",
            ),
        ),
        migrations.AddField(
            model_name="process",
            name="practice_category",
            field=models.CharField(
                blank=True,
                choices=[
                    ("veterinaria", "Veterinaria"),
                    ("industrial", "Industrial"),
                    ("medica_cat1", "Médica Categoría 1"),
                    ("medica_cat2", "Médica Categoría 2"),
                ],
                max_length=30,
                null=True,
                verbose_name="Categoría de Práctica",
            ),
        ),
        # Update unique constraints to include practice_category
        migrations.AlterUniqueTogether(
            name="checklistitemdefinition",
            unique_together={
                ("process_type", "practice_category", "name"),
                ("process_type", "practice_category", "order"),
            },
        ),
        # Populate Asesoría checklist templates
        migrations.RunPython(
            create_asesoria_checklist_definitions, delete_asesoria_checklist_definitions
        ),
    ]
